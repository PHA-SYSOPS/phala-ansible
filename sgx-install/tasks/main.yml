---
  - name: Create installation directory
    file: 
      path={{ install_path }}
      state=directory 
      mode=0755

  - name: Add Intel Apt signing key
    apt_key:
      url: https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key
      state: present

  - name: Add Intel Apt repository
    apt_repository:
      repo: deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu bionic main
      state: present


  - name: "Install required tools and packages"
    apt:
      name:
        - libsgx-enclave-common-dbgsym
        - libsgx-enclave-common
        - libsgx-enclave-common-dev
        - libsgx-launch 
        - libsgx-urts
        - linux-base-sgx
        - libsgx-dcap-ql
        - libsgx-uae-service
      state: latest
      update_cache: yes

  - name: Copy prebuilt Intel SGX installers
    action: copy
    args:
      src: "{{ role_path }}/files/{{ item }}"
      dest: "{{ install_path }}/{{ item }}"
      owner: root
      group: root
      mode: 0755
      backup: no
    with_items:
      - sgx_linux_x64_driver_1.36.bin
      - sgx_linux_x64_driver_2.6.0_b0a445b.bin
      - sgx_linux_x64_sdk_2.11.100.2.bin
      - sgx_enable
      - sgx_test

  - name: Enabling SGX in BIOS
    command: "{{ install_path }}/sgx_enable"
    register: sgx_enable_result

  - debug: msg={{ sgx_enable_result.stdout_lines }}

  - name: Rebooting to finish required changes to enable SGX in BIOS
    reboot:
      msg: "Reboot initiated by Ansible due to enable SGX in BIOS"
      connect_timeout: 5
      reboot_timeout: 300
      pre_reboot_delay: 0
      post_reboot_delay: 30
      test_command: uptime
    when: sgx_enable_result.stdout_lines is search('will be enabled after the system is rebooted') or
          sgx_enable_result.stdout_lines is search('Please reboot your system to finish')


  - name: Running SGX test
    command: "{{ install_path }}/sgx_test"
    register: sgx_test_result

  - name: Collecting SGX test results
    debug: msg={{ sgx_test_result.stdout_lines }}

  - name: If SGX test was succesfull driver was already installed
    set_fact:
      sgx_working: true
    when: sgx_test_result.stdout_lines is search('SGX HW TEST SUCCESSED')

  - debug: msg="SGX is already working on this system, skipping some installation steps"
    when: sgx_working|bool == 'false'

  - name: Check if SGX device exists
    stat: path=/dev/sgx
    register: sgxdev_result

  - name: Check if SGX legacy device exists
    stat: path=/dev/isgx
    register: isgxdev_result

  - name: Install Intel SGX driver DCAP module
    command: "{{ install_path }}/sgx_linux_x64_driver_1.36.bin"
    when: sgx_working|bool == 'false' or
          not isgxdev_result.stat.exists and
          not sgxdev_result.stat.exists and
          sgx_driver == "dcap"

  - name: Install Intel SGX driver LEGACY module
    command: "{{ install_path }}/sgx_linux_x64_driver_2.6.0_b0a445b.bin"
    when: sgx_working|bool == 'false' or
          not isgxdev_result.stat.exists and
          sgx_driver == "legacy"
    
  - name: Rebooting to activate SGX driver
    reboot:
      msg: "Reboot initiated by Ansible due to driver install"
      connect_timeout: 5
      reboot_timeout: 300
      pre_reboot_delay: 0
      post_reboot_delay: 30
      test_command: uptime
    when: not isgxdev_result.stat.exists and
          not sgxdev_result.stat.exists 

  - name: Check if SDK install was completed
    stat: path=/opt/sgxsdk/environment
    register: sdk_install_result

  - name: Install Intel SDK package
    expect:
      command: "{{ install_path }}/sgx_linux_x64_sdk_2.11.100.2.bin"
      responses:
        current: no
        directory: /opt
    when: not sdk_install_result.stat.exists

  - name: Check if SDK install was completed
    stat: path=/opt/sgxsdk/environment
    register: sdk_install_result

  - name: Check SDK installation results
    fail: msg="The SDK installation was not successfull"
    when: not sdk_install_result.stat.exists

